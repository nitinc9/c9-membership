REM
REM Description: Windows Command reference for working with AWS setup.
REM
REM General guide
REM - The commands use the PuTTY tool and utilities bundled with it (puttygen, plink and pscp) on Windows from
REM   https://putty.org/
REM - set command is used to set an environment variable.
REM


REM
REM Common Setup
REM

REM Set the following environment variables
set jumper=<jumper-public-ip>
set instance=<instance-private-ip>
set dbinstance=<dbinstance-private-dns>


REM
REM Jumper related commands
REM

REM Generate an SSH keypair (choose all defaults)
REM Use puttygen
REM - Click on "Generate".
REM - Specify 4096 bits.
REM - Follow the instruction to generate some randomness.
REM - Save the Private Key.
REM - Save the Public Key. 

REM Establish an SSH session with the jumper
REM Connect to the App EC2 instance using SSH tunnel
REM PuTTY Connection Settings
REM   Host: <jumper-public-ip>
REM   Port: 22
REM Connection->Data
REM   User: ec2-user
REM Connection->SSH->Auth
REM   Private Key File: <path-to-C9SSHKeyPair.ppk>
REM
REM Save the session with name as 'infra-jumper'.
REM Note: If the jumper reboots, the public IP will change. So, remember to update the session with the latest IP before use.

REM Copy the SSH keypair file to jumper
REM Note: Use pem file on jumper (ppk is for PuTTY only)
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk C9SSHKeyPair.pem ec2-user@%jumper%:/home/ec2-user/.ssh

REM Copy a file from local machine to jumper
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk <file-path> ec2-user@%jumper%:/tmp

REM Run a command in an automated way on the jumper
plink -i C:\Users\Administrator\C9SSHKeyPair.ppk ec2-user@%jumper% ls /tmp

REM Start an SSH tunnel to the App EC2 instance via the jumper using PuTTY saved session named 'infra-jumper'
plink -N -L 1122:%instance%:22 -load infra-jumper

REM Connect to the App EC2 instance using SSH tunnel
REM PuTTY Connection Settings
REM   Host: localhost
REM   Port: 1122
REM Connection->Data
REM   User: ec2-user
REM Connection->SSH->Auth
REM   Private Key File: <path-to-C9SSHKeyPair.ppk>
REM
REM Save the session with name, such as, 'c9-membership-app-dev'.

REM Run a command in an automated way via the SSH tunnel
plink -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 ec2-user@localhost ls /opt

REM Copy file(s) to the App EC2 instance using SSH tunnel
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk -r -P 1122 <file1> ... ec2-user@localhost:/tmp

REM Copy application sources to the App EC2 instance using SSH tunnel
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 src/node/* ec2-user@localhost:/opt/app

REM Start an SSH tunnel to the RDS instance via the jumper using PuTTY saved session named 'infra-jumper'
plink -N -L 13306:%dbinstance%:3306 -load infra-jumper


REM
REM Development App Setup on AWS: One time
REM 
REM instance=<dev-ec2-private-ip>
REM

REM Download application sources (use the GIT CLI or the GIT desktop client)
git clone https://github.com/nitinc9/c9-membership

REM Change directory to c9-membership
cd c9-membership

REM Establish the SSH tunnel to the RDS instance
plink -N -L 113306:%dbinstance%:3306 -load infra-jumper

REM Create database and schema using a local SQL client

REM Establish the SSH tunnel to the EC2 instance
plink -N -L 1122:%instance%:22 -load infra-jumper

REM Copy sources from your LOCAL machine via the SSH tunnel to a temporary location
plink -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 ec2-user@localhost "mkdir -p /tmp/node"
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 src/node/* ec2-user@localhost:/tmp/node

REM SSH to the EC2 instance via the tunnel

REM Run the following commands after doing SSH to the app EC2 instance

# Install nodejs (Ref: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash
. ~/.nvm/nvm.sh
nvm install 8.11.3
node -v

# Set up application structure
sudo mkdir -p /opt/app
sudo chown -R ec2-user:ec2-user /opt/app

# Copy sources to the app folder and clean up
cp -r /tmp/node/* /opt/app
rm -rf /tmp/node/*

# Install node packages
cd /opt/app
npm i

# Start application in development mode (to exit hit Ctrl+C)
cd /opt/app
npm run dev


REM
REM QA App Setup on AWS: One time
REM 
REM instance=<qa-ec2-private-ip>
REM

REM Download application sources (use the GIT CLI or the GIT desktop client)
git clone https://github.com/nitinc9/c9-membership

REM Change directory to c9-membership
cd c9-membership

REM Establish the SSH tunnel to the RDS instance
plink -N -L 113306:%dbinstance%:3306 -load infra-jumper

REM Create database and schema using a local SQL client

REM Establish the SSH tunnel to the EC2 instance
plink -N -L 1122:%instance%:22 -load infra-jumper

REM Copy application distribution from your LOCAL machine via the SSH tunnel to a temporary location
cd src/node
npm run build
plink -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 ec2-user@localhost "mkdir -p /tmp/node"
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 c9-membership.zip ec2-user@localhost:/tmp/node
plink -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 ec2-user@localhost "cd /tmp/node; unzip c9-membership.zip"
cd ../..

REM Prepare nodejs offline install (or download the installer from the following URL)
wget http://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.gz
pscp -i C:\Users\Administrator\C9SSHKeyPair.ppk -P 1122 node-v8.11.3-linux-x64.tar.gz ec2-user@localhost:/tmp
del node-v8.11.3-linux-x64.tar.gz

REM SSH to the EC2 instance via the tunnel

REM Run the following commands after doing SSH to the app EC2 instance

REM Install nodejs (offline install)
sudo tar -C /usr/local --strip-components 1 -xzf /tmp/node-v8.11.3-linux-x64.tar.gz
rm -f /tmp/node-v8.11.3-linux-x64.tar.gz

REM Set up application structure
sudo mkdir -p /opt/app
sudo chown -R ec2-user:ec2-user /opt/app

REM Copy sources to the app folder and clean up
cp -r /tmp/node/* /opt/app
rm -rf /tmp/node/*

REM Edit /opt/app/config.json for correct values

REM Start application as daemon
cd /opt/app
npm run start

REM Keep application running across server reboots
npm run install-service

REM Stop application (daemon)
cd /opt/app
npm run stop

REM Restart application (daemon)
cd /opt/app
npm run restart

REM Show application status
cd /opt/app
npm run status

REM Uninstall application as a service
npm run uninstall-service


REM
REM Run the following commands after doing SSH to the app EC2 instance
REM CloudWatch Agent Setup (ref: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-first-instance.html)
REM

REM Download and install the agent
mkdir -p /tmp/CWAgent
cd /tmp/CWAgent
wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
unzip AmazonCloudWatchAgent.zip
sudo ./install.sh
cd /opt/aws/amazon-cloudwatch-agent/etc
rm -rf /tmp/CWAgent

REM Set up CloudWatch agent configuration file (ref: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html)
sudo bash -c 'cat << EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
{
  "metrics": {
    "metrics_collected": {
      "mem": {
        "measurement": [
          "mem_free",
          "mem_used",
          "mem_total"
        ],
        "append_dimensions": {
          "InstanceId": "i-0a260d299b5fd05f2"
        },
        "metrics_collection_interval": 300
      },
      "disk": {
        "resources": [
          "/",
          "/tmp"
        ],
        "measurement": [
          {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
          "used",
          "total"
        ],
        "ignore_file_system_types": [
          "sysfs", "devtmpfs"
        ],
        "append_dimensions": {
          "InstanceId": "i-0a260d299b5fd05f2"
        },
        "metrics_collection_interval": 600
      }
    },
    "aggregation_dimensions": [["InstanceId"]]
  },
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/opt/app/c9-membership.log",
            "log_group_name": "c9-membership-app.log",
            "log_stream_name": "c9-membership.log",
            "timezone": "UTC",
            "timestamp_format": "%Y-%m-%d %H:%M:%S"
          }
        ]
      }
    }
  }
}
EOF'

REM Start CloudWatch agent
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

